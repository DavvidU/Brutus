// <auto-generated />
using System;
using Brutus.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Brutus.Migrations
{
    [DbContext(typeof(BrutusContext))]
    [Migration("20240118155603_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Brutus.Models.Admin", b =>
                {
                    b.Property<int>("ID_Admina")
                        .HasColumnType("int");

                    b.HasKey("ID_Admina");

                    b.ToTable("Admini");
                });

            modelBuilder.Entity("Brutus.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Brutus.Models.Klasa", b =>
                {
                    b.Property<int>("ID_Klasy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Klasy"));

                    b.Property<int?>("ID_Wychowawcy")
                        .HasColumnType("int");

                    b.Property<string>("LiteraKlasy")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("NumerRoku")
                        .HasColumnType("int");

                    b.HasKey("ID_Klasy");

                    b.HasIndex("ID_Wychowawcy");

                    b.ToTable("Klasy");
                });

            modelBuilder.Entity("Brutus.Models.KlasaPrzedmiot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Klasy")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Przedmiotu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Klasy");

                    b.HasIndex("ID_Przedmiotu");

                    b.ToTable("KlasyPrzedmioty");
                });

            modelBuilder.Entity("Brutus.Models.Konto", b =>
                {
                    b.Property<int>("ID_Konta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Konta"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NrTelefonu")
                        .HasColumnType("int");

                    b.Property<string>("SkrotHasla")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID_Konta");

                    b.ToTable("Konta");
                });

            modelBuilder.Entity("Brutus.Models.KontoWiadomosc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Odbiorcy")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Wiadomosci")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Odbiorcy");

                    b.HasIndex("ID_Wiadomosci");

                    b.ToTable("KontaWiadomosci");
                });

            modelBuilder.Entity("Brutus.Models.Nauczyciel", b =>
                {
                    b.Property<int>("ID_Nauczyciela")
                        .HasColumnType("int");

                    b.HasKey("ID_Nauczyciela");

                    b.ToTable("Nauczyciele");
                });

            modelBuilder.Entity("Brutus.Models.NauczycielPrzedmiot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Nauczyciela")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Przedmiotu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Nauczyciela");

                    b.HasIndex("ID_Przedmiotu");

                    b.ToTable("NauczycielePrzedmioty");
                });

            modelBuilder.Entity("Brutus.Models.Ocena", b =>
                {
                    b.Property<int>("ID_Oceny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Oceny"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ID_Nauczyciela")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Przedmiotu")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Ucznia")
                        .HasColumnType("int");

                    b.Property<string>("Komentarz")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Waga")
                        .HasColumnType("int");

                    b.Property<int>("Wartosc")
                        .HasColumnType("int");

                    b.HasKey("ID_Oceny");

                    b.HasIndex("ID_Nauczyciela");

                    b.HasIndex("ID_Przedmiotu");

                    b.HasIndex("ID_Ucznia");

                    b.ToTable("Oceny");
                });

            modelBuilder.Entity("Brutus.Models.Ogloszenie", b =>
                {
                    b.Property<int>("ID_Ogloszenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Ogloszenia"));

                    b.Property<int?>("ID_Nauczyciela")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID_Ogloszenia");

                    b.HasIndex("ID_Nauczyciela");

                    b.ToTable("Ogloszenia");
                });

            modelBuilder.Entity("Brutus.Models.Przedmiot", b =>
                {
                    b.Property<int>("ID_Przedmiotu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Przedmiotu"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID_Przedmiotu");

                    b.ToTable("Przedmioty");
                });

            modelBuilder.Entity("Brutus.Models.PrzedmiotZalacznik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Przedmiotu")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Zalacznika")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Przedmiotu");

                    b.HasIndex("ID_Zalacznika");

                    b.ToTable("PrzedmiotyZalaczniki");
                });

            modelBuilder.Entity("Brutus.Models.Pytanie", b =>
                {
                    b.Property<int>("ID_Pytania")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Pytania"));

                    b.Property<int?>("ID_Testu")
                        .HasColumnType("int");

                    b.Property<string>("PoprawnaOdpowiedz")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Punkty")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WariantA")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WariantB")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WariantC")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WariantD")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_Pytania");

                    b.HasIndex("ID_Testu");

                    b.ToTable("Pytania");
                });

            modelBuilder.Entity("Brutus.Models.Rodzic", b =>
                {
                    b.Property<int>("ID_Rodzica")
                        .HasColumnType("int");

                    b.HasKey("ID_Rodzica");

                    b.ToTable("Rodzice");
                });

            modelBuilder.Entity("Brutus.Models.Test", b =>
                {
                    b.Property<int>("ID_Testu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Testu"));

                    b.Property<TimeSpan>("CzasTrwania")
                        .HasColumnType("time");

                    b.Property<int?>("ID_Nauczyciela")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaZadan")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_Testu");

                    b.HasIndex("ID_Nauczyciela");

                    b.ToTable("Testy");
                });

            modelBuilder.Entity("Brutus.Models.Uczen", b =>
                {
                    b.Property<int>("ID_Ucznia")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Klasy")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Rodzica")
                        .HasColumnType("int");

                    b.HasKey("ID_Ucznia");

                    b.HasIndex("ID_Klasy");

                    b.HasIndex("ID_Rodzica");

                    b.ToTable("Uczniowie");
                });

            modelBuilder.Entity("Brutus.Models.UczenOcena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Oceny")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Ucznia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Oceny");

                    b.HasIndex("ID_Ucznia");

                    b.ToTable("UczniowieOceny");
                });

            modelBuilder.Entity("Brutus.Models.UczenTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Testu")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Ucznia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Testu");

                    b.HasIndex("ID_Ucznia");

                    b.ToTable("UczniowieTesty");
                });

            modelBuilder.Entity("Brutus.Models.Wiadomosc", b =>
                {
                    b.Property<int>("ID_Wiadomosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Wiadomosci"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ID_Nadawcy")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID_Wiadomosci");

                    b.HasIndex("ID_Nadawcy");

                    b.ToTable("Wiadomosci");
                });

            modelBuilder.Entity("Brutus.Models.WiadomoscZalacznik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ID_Wiadomosci")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Zalacznika")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ID_Wiadomosci");

                    b.HasIndex("ID_Zalacznika");

                    b.ToTable("WiadomosciZalaczniki");
                });

            modelBuilder.Entity("Brutus.Models.Wychowawca", b =>
                {
                    b.Property<int>("ID_Wychowawcy")
                        .HasColumnType("int");

                    b.HasKey("ID_Wychowawcy");

                    b.ToTable("Wychowawcy");
                });

            modelBuilder.Entity("Brutus.Models.Zalacznik", b =>
                {
                    b.Property<int>("ID_Zalacznika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Zalacznika"));

                    b.Property<byte[]>("Dane")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_Zalacznika");

                    b.ToTable("Zalaczniki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Brutus.Models.Admin", b =>
                {
                    b.HasOne("Brutus.Models.Konto", "Konto")
                        .WithMany()
                        .HasForeignKey("ID_Admina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Konto");
                });

            modelBuilder.Entity("Brutus.Models.Klasa", b =>
                {
                    b.HasOne("Brutus.Models.Wychowawca", "Wychowawca")
                        .WithMany()
                        .HasForeignKey("ID_Wychowawcy");

                    b.Navigation("Wychowawca");
                });

            modelBuilder.Entity("Brutus.Models.KlasaPrzedmiot", b =>
                {
                    b.HasOne("Brutus.Models.Klasa", "Klasa")
                        .WithMany()
                        .HasForeignKey("ID_Klasy");

                    b.HasOne("Brutus.Models.Przedmiot", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("ID_Przedmiotu");

                    b.Navigation("Klasa");

                    b.Navigation("Przedmiot");
                });

            modelBuilder.Entity("Brutus.Models.KontoWiadomosc", b =>
                {
                    b.HasOne("Brutus.Models.Konto", "Odbiorca")
                        .WithMany()
                        .HasForeignKey("ID_Odbiorcy");

                    b.HasOne("Brutus.Models.Wiadomosc", "Wiadomosc")
                        .WithMany()
                        .HasForeignKey("ID_Wiadomosci");

                    b.Navigation("Odbiorca");

                    b.Navigation("Wiadomosc");
                });

            modelBuilder.Entity("Brutus.Models.Nauczyciel", b =>
                {
                    b.HasOne("Brutus.Models.Konto", "Konto")
                        .WithMany()
                        .HasForeignKey("ID_Nauczyciela")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Konto");
                });

            modelBuilder.Entity("Brutus.Models.NauczycielPrzedmiot", b =>
                {
                    b.HasOne("Brutus.Models.Nauczyciel", "Nauczyciel")
                        .WithMany()
                        .HasForeignKey("ID_Nauczyciela");

                    b.HasOne("Brutus.Models.Przedmiot", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("ID_Przedmiotu");

                    b.Navigation("Nauczyciel");

                    b.Navigation("Przedmiot");
                });

            modelBuilder.Entity("Brutus.Models.Ocena", b =>
                {
                    b.HasOne("Brutus.Models.Nauczyciel", "Nauczyciel")
                        .WithMany()
                        .HasForeignKey("ID_Nauczyciela");

                    b.HasOne("Brutus.Models.Przedmiot", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("ID_Przedmiotu");

                    b.HasOne("Brutus.Models.Uczen", "Uczen")
                        .WithMany()
                        .HasForeignKey("ID_Ucznia");

                    b.Navigation("Nauczyciel");

                    b.Navigation("Przedmiot");

                    b.Navigation("Uczen");
                });

            modelBuilder.Entity("Brutus.Models.Ogloszenie", b =>
                {
                    b.HasOne("Brutus.Models.Nauczyciel", "Nauczyciel")
                        .WithMany()
                        .HasForeignKey("ID_Nauczyciela");

                    b.Navigation("Nauczyciel");
                });

            modelBuilder.Entity("Brutus.Models.PrzedmiotZalacznik", b =>
                {
                    b.HasOne("Brutus.Models.Przedmiot", "Przedmiot")
                        .WithMany()
                        .HasForeignKey("ID_Przedmiotu");

                    b.HasOne("Brutus.Models.Zalacznik", "Zalacznik")
                        .WithMany()
                        .HasForeignKey("ID_Zalacznika");

                    b.Navigation("Przedmiot");

                    b.Navigation("Zalacznik");
                });

            modelBuilder.Entity("Brutus.Models.Pytanie", b =>
                {
                    b.HasOne("Brutus.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("ID_Testu");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Brutus.Models.Rodzic", b =>
                {
                    b.HasOne("Brutus.Models.Konto", "Konto")
                        .WithMany()
                        .HasForeignKey("ID_Rodzica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Konto");
                });

            modelBuilder.Entity("Brutus.Models.Test", b =>
                {
                    b.HasOne("Brutus.Models.Nauczyciel", "Nauczyciel")
                        .WithMany()
                        .HasForeignKey("ID_Nauczyciela");

                    b.Navigation("Nauczyciel");
                });

            modelBuilder.Entity("Brutus.Models.Uczen", b =>
                {
                    b.HasOne("Brutus.Models.Klasa", "Klasa")
                        .WithMany()
                        .HasForeignKey("ID_Klasy");

                    b.HasOne("Brutus.Models.Rodzic", "Rodzic")
                        .WithMany()
                        .HasForeignKey("ID_Rodzica");

                    b.HasOne("Brutus.Models.Konto", "Konto")
                        .WithMany()
                        .HasForeignKey("ID_Ucznia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasa");

                    b.Navigation("Konto");

                    b.Navigation("Rodzic");
                });

            modelBuilder.Entity("Brutus.Models.UczenOcena", b =>
                {
                    b.HasOne("Brutus.Models.Ocena", "Ocena")
                        .WithMany()
                        .HasForeignKey("ID_Oceny");

                    b.HasOne("Brutus.Models.Uczen", "Uczen")
                        .WithMany()
                        .HasForeignKey("ID_Ucznia");

                    b.Navigation("Ocena");

                    b.Navigation("Uczen");
                });

            modelBuilder.Entity("Brutus.Models.UczenTest", b =>
                {
                    b.HasOne("Brutus.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("ID_Testu");

                    b.HasOne("Brutus.Models.Uczen", "Uczen")
                        .WithMany()
                        .HasForeignKey("ID_Ucznia");

                    b.Navigation("Test");

                    b.Navigation("Uczen");
                });

            modelBuilder.Entity("Brutus.Models.Wiadomosc", b =>
                {
                    b.HasOne("Brutus.Models.Konto", "Nadawca")
                        .WithMany()
                        .HasForeignKey("ID_Nadawcy");

                    b.Navigation("Nadawca");
                });

            modelBuilder.Entity("Brutus.Models.WiadomoscZalacznik", b =>
                {
                    b.HasOne("Brutus.Models.Wiadomosc", "Wiadomosc")
                        .WithMany()
                        .HasForeignKey("ID_Wiadomosci");

                    b.HasOne("Brutus.Models.Zalacznik", "Zalacznik")
                        .WithMany()
                        .HasForeignKey("ID_Zalacznika");

                    b.Navigation("Wiadomosc");

                    b.Navigation("Zalacznik");
                });

            modelBuilder.Entity("Brutus.Models.Wychowawca", b =>
                {
                    b.HasOne("Brutus.Models.Nauczyciel", "Nauczyciel")
                        .WithMany()
                        .HasForeignKey("ID_Wychowawcy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nauczyciel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Brutus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Brutus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brutus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Brutus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
